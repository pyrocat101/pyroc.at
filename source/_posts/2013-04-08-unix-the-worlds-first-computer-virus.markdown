---
layout: post
title: "Unix: 世界上第一个计算机病毒"
date: 2013-04-08 11:56
comments: true
categories: Translation
---

*本文译自1994年出版的The Unix-Haters Handbook[^ugh]，第1章。注意，文中许多事实已不能反映当今Unix系操作系统的发展状况。*{:lang='zh'}

[^ugh]: 一本Unix用户的吐槽集合：[pdf版](http://web.mit.edu/~simsong/www/ugh.pdf)

{% blockquote 佚名 %}
伯克利最著名的两大特产分别是LSD和Unix，我可不认为这是一种巧合。
{% endblockquote %}

病毒越小、适应性越强就越好。它们不太复杂：没有呼吸作用、新陈代谢和运动等奥秘所需要的构造，它们只有足够实现自我复制的DNA和RNA。比方说，随便哪种流感病毒的体积都比它们感染的细胞要小许多倍，但却能在每个流感季节成功地变异出新菌株。偶尔毒性增强了，随之产生的流行病会杀死数百万人，因为人类的免疫系统没法在病毒入侵前消灭它们。但是，大多数时候，病毒只是些小烦恼——不可避免，却无处不在。

优秀病毒的特征是：

* 体积小

  病毒能做的不多，所以它们也不需要很大。有人还争论病毒到底是活着的生物还是几片具有破坏性的核酸和蛋白质。

* 移植性强

  一个病毒单体可以入侵多种细胞。经过少许变异后，能入侵更多。动物和病毒常常通过变异来攻击人类。证据表明，艾滋病病毒很可能是由猿猴病毒变异而来。

* 霸占宿主资源

  如果宿主没有办法为病毒提供安全的环境和自我复制的能量，病毒就会死。

* 快速变异

  病毒频繁地变异成不同种类。它们虽然有着相同的结构，但却有足够大的区别来混淆宿主的防御系统。

Unix具备一个非常成功的病毒的所有特征。它的最初形态很小，功能稀缺，其设计上的极简主义已登峰造极。正是因为它缺乏一个真正的操作系统所应该具有的功能（比如内存映射文件[^mmap]（memory-mapped file）、高速I/O、健壮的文件系统、记录、文件、设备锁、合理的进程间通信，等等），它具有可移植性，而功能更强大的操作系统就没有这么高的可移植性了。Unix还从它的宿主处吸取能量，如果没有系统管理员维护，它就会时不时崩溃、吐核[^core-dump]（core dump），或者当机。Unix还经常变异：某个版本里正常工作的补丁在另一个版本里却不能用。如果*安德罗美达菌株*[^andromeda]是软件的话，那么它一定是Unix。

[^mmap]: 由一个文件到一块内存的映射。
[^core-dump]: 又称为核心转储，是操作系统在进程收到某些信号而终止运行时，将此时进程地址空间的内容以及有关进程状态的其他信息写出的一个磁盘文件。这种信息往往用于调试。
[^andromeda]: 1969年Michael Clayton的畅销科幻惊悚小说《天外来菌》中虚构的地外微生物，能通过凝固血液迅速杀死人类。

Unix是带用户界面的计算机病毒。

<!-- more -->

## 疫病史

Unix疫的根源可以追溯到上个世纪60年代，当AT&T、通用电气和麻省理工学院正着手开发一种叫做「信息实用工具（information utility）」的新型计算机系统的时候。由国防部高级研究计划局（ARPA）出资，该项目计划开发和发电厂一样可靠的的计算机系统：将源源不断的计算资源提供给成百上千的普通人。这个「信息实用工具」将配备足够多的中央处理器、内存条、输入/输出处理器，这样就可以同时服务许多用户。该系统还被设计为具有最高级别的安全性，一位用户的操作绝不会影响到另一位。它那野心勃勃的目标也体现在名字中：Multics，即*多路复用信息与计算机系统*（MULTiplexed Information and Computer System）的缩写。

Multics被*设计*用于存储、获取大规模数据集，供大量用户同时使用，帮助他们互相沟通。同样，它也保护用户免受外部攻击。你可以说它被设计成了一辆坦克，使用它就像在开坦克。

Multics项目最终实现了所有的目标。不过在1969年，项目却落后于预定计划。此时AT&T退缩了：它从项目中抽身，留给三位研究员——Ken Thompson、Dennis Ritchie和Joseph Ossana——一段未曾预料到的空闲时间。就在程序员们试图说服管理层购买一台DEC System 10（一款强大的分时计算机，拥有复杂的交互式操作系统）未果后，Thompson和他的朋友们转而为实验室里一台闲置的PDP-7[^pdp-7]编写（玩）一个叫做Space Travel的游戏。

[^pdp-7]: 由DEC公司研发的一款迷你电脑，从1965年开始生产上市。

起初，Thompson使用贝尔实验室的GE465交叉编译Space Travel到PDP-7上。不过很快——意识到他们为PDP-7编写操作系统比在GE465舒适的环境下开发Space War[^space-war]还要更快——Thompson为PDP-7编写了汇编器、文件系统、一个很小的内核，就是为了玩Space Travel。就这样，Unix诞生了。

[^space-war]: 此处疑为笔误，应该是Space Travel。

就像研究细菌武器（同一时期ARPA资助的另一项计划）的科学家们，早期Unix研究者并没有意识到他们的行为可能带来的严重后果。不像细菌武器的实验者，Thompson和Ritchie没有采取任何防护措施。他们不认为自己是病原携带者，而自认为是福音传道士。Thompson和他的伙伴们无意中写了被称为文档的几页纸，然后他们开始*散播*这些资料。

最初，Unix感染仅限于贝尔实验室内少数几个选择组。那时候，实验室的专利办公室刚好急需一个文本处理系统，于是他们买了一台PDP-11/20（此时Unix已经变异并感染了第二个宿主），不幸成为这个菌株的第一个小白鼠。到1973年，Unix已经扩散到了研究所内25个不同的系统，AT&T不得不建立Unix系统组来提供内部支持。哥伦比亚大学的研究者们也听说了Unix，并向Ritchie要了一份拷贝。就在大家还没有意识到发生了什么的时候，Unix已经逃跑了。

文献上称Unix的成功是因为其技术优越性，这完全是扯淡。Unix只是比竞争者有*进化优势*，并非*技术优势*。Unix的商业成功得益于它是一个病毒。它仅有的进化优势就是体积小，设计简单，并因此具有可移植性。后来Unix的流行和商业上的成功则是因为它那三个非常成功的宿主：PDP-11[^pdp-11]、VAX[^vax]、Sun工作站（Sun工作站一开始就被*设计*成病毒载体）。

[^pdp-11]: DEC公司于1970年到1980年代销售的一系列16位迷你计算机，广受当时的程序员喜爱。
[^vax]: 由DEC公司研发的一款32位小型计算机，是PDP-11的扩展版本，支持虚拟内存管理。

正如某DEC员工写的：

> From: CLOSET::E::PETER 29-SEP-1989 09:43:26.63  
> To: closet::t_parmenter  
> Subj: Unix
>
> 以前卖Lisp机器[^lisp-machine]的时候，我就经常被询问到Unix。如果没有女性听众在场，我时常将Unix比作皮肤疱疹——许多人得疱疹，没人想得疱疹，得疱疹的人简直是倒了大霉，但如果人们想要摆脱疱疹，就一定可以治好它。听众们会微笑、点头，通常这样就能结束对Unix的讨论。

[^lisp-machine]: 被设计来高效运行（通常有专用硬件支持）以Lisp语言为主要软件开发语言的通用计算机。

那个年代（1970年代晚期到1980年代早期）新生或已经存在的至少20个商业工作站制造商中，只有屈指可数的几个——Digital、阿波罗、Symbolics、惠普——抵制Unix。到1993年，Symbolics已经受第11章[^chapter11]保护，而阿波罗已经被（惠普）收购，剩下的公司都成了Unix的坚定支持者。

[^chapter11]: 又称为「第11章破产保护」，出自《美国法典》的第十一章。债务人（包括法人和自然人）在申请破产保护后的120天内有权提出融资和重组等方案，以避免债权人对企业提出直接破产。

### 随机遗传物质的积累

染色体积累随机遗传物质，这些物质被随机复制并传递给下一代。一旦人类基因组被完整绘制，我们会发现只有百分之几的基因描述了功能完整的人类，而剩下的基因，则描述了大猩猩、突变者、电视福音传道者，以及二手电脑销售商。

同样的道理也适用于Unix。尽管始于至简，Unix以极快的速度累计了大量垃圾基因。举例来说吧，很难找到一个版本的Unix不带有Linotronic或Imagen排字机的驱动程序，尽管只有极少数Unix用户知道这些机器长什么样子。正如Olin Shivers观察到的，Unix最初的进化压力已经减轻，菌株有如脱缰野马。

> Date: Wed, 10 Apr 91 08:31:33 EDT  
> From: Olin Shivers <shivers@bronto.soar.cs.cmu.edu>  
> To: UNIX-HATERS  
> Subject: Unix evolution  
>
> 我来分享一些关于Unix在贝尔实验室诞生以来的一般进化过程（这里使用了不严谨的术语）的想法。我认为可以如下表述：
> 
> 在早期PDP-11时代，Unix程序有如下设计规范：
> 
> 规则一、它不必很好，甚至也不需要正确，
> 
> 但是：
> 
> 规则二、它必须很小。
> 
> 这就是工具箱方法（toolkit approach）这类东西。
> 
> 当然啦，随着时间的流逝，计算机硬件逐渐变强：处理器更快了，内存地址空间从16位升级到32位，内存更便宜了，等等。
> 
> 所以第2条规范放宽了。

随着病毒的扩散，多余的遗传物质也在不断变异。那些基因是如何传到这里的已经无所谓了，它们被被尽职尽责地代代相传，七大姑与八大姨的相似程度和伍迪·艾伦与迈克尔·乔丹的相似程度差不多。这种行为也被记载入几本书中。举例来说，Douglas Comer所著的《TCP/IP互联网络》一书第15.3节，「路由信息协议（RIP）」中，描述了一个劣等基因是如何在Unix网络代码中存活并变异的（第3自然段）：

> 尽管相比上一代协议只有少许改进，RIP作为IGP协议的流行程度绝不归功于其技术优势。相反地，它的流行是因为伯克利在其广受欢迎的4.X BSD UNIX系统中附带了`routed`软件。许多互联网站点采用并安装了`routed`，开始使用RIP协议，却不考虑其技术优点与局限性。

下一段紧接着写道：

> 有关RIP协议最令人吃惊的事实也许是，它虽然广为传播，却没有一个正式的标准。许多实现衍生自伯克利的代码，但它们间的互操作性却取决于程序员们对未入文档的细节和微妙之处的理解。每出现一个新版本，就会出现更多的问题。

就像经典广播电台的播放列表可以十年不变，Unix同时带有混杂的、过时的遗产。这里有「冲撞」乐队[^clash]时代的图形界面；「披头士」[^beatles]乐队时代的，用两个字母命名的命令；简洁晦涩的输出是为慢速电传打字机而设计的系统程序（比如`ps`）；宾·克罗斯比[^bing]时代的命令行编辑（`#`和`@`到现在都还是默认行编辑指令）；还有斯科特·乔普林[^joplin]时代的吐核。

[^clash]: 成立于1976年的英国著名朋克乐队，代表作为London Calling。
[^beatles]: 亦称为「甲壳虫乐队」，是成立于1960年的英国著名摇滚乐队。
[^bing]: 美国流行歌手、演员，于1962年获颁格莱美终身成就奖。
[^joplin]: 美国拉格泰姆（Ragtime）音乐作曲家。逝世50多年后，其作品于1970年代受极大重视和欢迎。

其他人也注意到Unix只是进化上优胜于竞争对手，而不是技术上优胜。Richard P. Gabriel在他的文章《「坏即是好」的崛起》[^worse-is-better]中阐述了这个主题（见附录A）。他的论点是：Unix的设计哲学*要求*所有的设计决定都偏向实现上的简单性，而不是正确性、一致性或完整性。他把这种想法称为「坏即是好」哲学，并展示了这一哲学如何指导产生了一类程序：它们在技术上被那些正确性和一致性方面登峰造极的软件甩开几条街，但却有着*进化优势*，因为它们更容易被移植。就像病毒一样，他们没有什么优雅可言，但却很成功。事实上，你甚至有可能会死于某个病毒。

[^worse-is-better]: 原文在此：[The Rise of Worse is Better](http://www.jwz.org/doc/worse-is-better.html)。

真是个令人欣慰的想法。

## 性、毒品和Unix

尽管Unix像病毒一样扩散，其广为接受的程度只能用另一个隐喻来描述：毒品。

就像所有优秀的毒贩一样，AT&T在1970年代免费给大学分发Unix样品。研究者们和学生们用Unix比用其他操作系统更嗨。它很便宜，有可塑性，还能运行在相对廉价的硬件上。它比他们能获得的其他东西更能满足需求。未来将与Unix同台竞技的其他更优秀的操作系统要么必须运行在大学买不起的硬件上，要么不「免费」，要么还在实验室的襁褓里。AT&T这一策略几乎无成本地培养了许多身心上依赖于Unix的新生黑客。

当摩托罗拉68000微处理器面世的时候，市场上出现了几十个工作站公司。它们中鲜有掌握深厚的操作系统技术的公司，因此几乎毫无二致地采用了Unix作为操作系统。不只是因为Unix具有很强的可移植性，也因为能解决移植问题的Unix黑客既廉价又好找。这些程序员们非常善于将Unix临时改造（也称为「porting」）到各个平台上。对工作站制造商来说，最经济的选择就是Unix。

那么，用户想要bug得不到修复的操作系统吗？当然不。用户想要工具集十分糟糕的操作系统吗？当然不。用户想要没有命令名自动补全的操作系统吗？当然不。用户真的想要用户界面既糟糕又危险的操作系统吗？当然不。用户想要没有内存映射文件的操作系统吗？当然不。用户想要不能持续运行好几天（有时是好几小时）的操作系统吗？当然不。用户想要没有智能预输入的操作系统吗？当然不。用户想要支持编译器和链接器的，*最便宜*的工作站吗？妥妥的，为了这个他们甚至可以做出一些牺牲。

用户称他们想要Unix，是因为那比他们用了三十年的，「石器时代」的FORTRAN和Cobol开发环境更好。但他们在选择Unix的时候，却无知地忽略了操作系统领域多年的研究，这些研究成果本来可以远远更加完美地解决他们的问题。到1984年，根据DEC的数字，全美四分之一的VAX都运行着Unix，尽管DEC不会为此提供技术支持。

Sun Microsystems公司今天的成功是因为它生产最便宜的工作站，而不是因为他们的工作站最好或性价比最优。优秀的操作系统需要消耗过多的计算机资源，因此*经济上的*，而不是技术上的实惠选择就是Unix。Unix被写入了Sun公司的商业计划书，它的创建者则是功成名就的Unix黑客，而消费者们也花钱买到了他们想要的东西。

## 标准化

{% blockquote Grace Murray Hopper %}
关于「标准」最美妙的事实是，有那么多的选择。
{% endblockquote %}

自从Unix在1980年代开始流行以来，部分Unix厂商不断努力，想要「标准化」这个操作系统。尽管这种努力更多地体现在媒体的新闻稿中而不是程序员的屏幕上，像Sun、IBM、惠普和DEC这样的Unix巨头的确砸了数百万美元来解决这个问题——这个他们自己导致的问题。

### 为什么Unix供应商们都不想要一个标准Unix

统一Unix系统的动力很大程度上来自消费者们。他们看到了过多版本的Unix，发现它们过于复杂，因此最后买了一台运行Microsoft Windows的PC兼容机。确实，消费者们情愿买一台相似价位的工作站来运行一个「真正」的操作系统（他们受骗认为那就是Unix），但风险在于消费者需要的某个关键应用程序可能不被他们购买的特定Unix版本所支持。

消费者们想要兼容版本的Unix的第二个理由是，他们错误地相信软件兼容性将迫使硬件供应商在价格和性能上竞争，最终使工作站价格走低。

当然了，这两条*恰好也是*像Sun、IBM、惠普、DEC这样的公司真心*不希望*有个统一Unix的原因。如果每台Sun、IBM、惠普和DEC工作站都能运行相同的软件，某个已经和Sun签了300万美元合约的公司也没必要坚持使用Sun公司的产品了：这家虚构的公司大可以去买一堆惠普或DEC的工作站，随便哪家开价更低就行。

讽刺的是，这些消费者们投诚Unix的一个原因就是它那可以取代大型机和微机专有系统的「开放式系统」承诺。然而，归根到底，转向Unix阵营仅仅是切换到了另一个专有系统——碰巧是Unix系统的专有版本。

> Date: Wed, 20 Nov 91 09:37:23 PST  
> From: simsong@nextworld.com  
> To: UNIX-HATERS  
> Subject: Unix names  
> 
> 或许记住各个不同版本Unix的名字对大多数人来说不成问题，但今天《NeXTWorld》的编审却问我AIX和A/UX的区别。
> 
> 「AIX是IBM公司的UNIX，A/UX是苹果公司的Unix。」
> 
> 「区别是什么？」他问道。
> 
> 「我也不太确定，它们都在AT&T的System V基础上有些可有可无的改动。还有个HP-UX，是惠普公司的的System V衍生版本。DEC管自家的系统叫ULTRIX。DGUX是Data General公司出的。哦，差点忘了Xenix——SCO公司出的。」
> 
> 另外，NeXT公司管自家的Unix版本（其实就是无药可救地用Unix包装了MACH内核）叫NEXTSTEP。但我们似乎很难定义NEXTSTEP：它到底是一个窗体系统呢？还是Objective-C呢？还是一个环境？还是Mach内核？到底是啥？
>
> 本来许多供应商想使用「Unix」这个词来命名自家产品，但AT&T的律师不允许，因为他们认为「Unix」这个词是某种非常宝贵的注册商标。于是供应商们只好选用VENIX和ULTRIX这样的名字来避免法律纠纷。
>
> 现在呢，只要条件允许的话，大多数供应商根本不会就用Unix这个词。不是因为不想吃官司：他们只是想要让自家全新的、改进过的Unix与其他只达到了业界标准的Unix版本划清界限。
>
> 我们真是很难不对供应商持强硬态度啊，毕竟他们彼时口口声声说要给用户和开发者提供一个通用的Unix环境，此时又称要做一个持有商标的、比竞争对手更优秀的Unix版本：添加几个新特性、改进功能、提供更好的管理工具，这样就可以抬高价格了。谁要是相信真相介于两者之间就是瞎了狗眼。
>
> > Date: Sun, 13 May 90 16:06 EDT  
> > From: John R. Dunning <jrd@stony-brook.scrc.symbolics.com>  
> > To: jnc@allspice.lcs.mit.edu, UNIX-HATERS  
> > Subject: Unix: the last word in incompatibility.  
> >
> > Date: Tue, 8 May 90 14:57:43 EDT  
> > From: Noel Chiappa <jnc@allspice.lcs.mit.edu>  
> > [...]  
> > 
> > 我觉得Unix和雪花是这个世界上仅有的，任意两个都不完全相同的东西。
> 
> 说得不错，这让我想到了另外一则故事。
> 
> 几年前，我还在当顾问时，有份软件公司的工作是构建一个大型图形用户界面类应用程序。他们用PDP-11上的某种Unix做开发，并计划将程序随附在电路板上卖给OEM厂商。而我的任务，就是评估运行在多总线硬件上的多个Unix变种，看看哪个最能符合他们的需求。
>
> 评估过程大致是将他们的测试程序，也就是产品早期原型，编译并运行在多种Unix系统上。小菜一碟，我想。但是，哎哟，某个供应商修改了这类系统函数的所有参数的顺序。还有，哎呀，你看看：Xenix编译器里的一个bug让你没法使用字节大小的变量，得把它们伪装成结构体或者联合体这样的东西。好吧，真是出乎意料啊，Venix的伪实时装置根本就不能用，你还得自己写一个。真是够倒胃口的。
> 
> 我不大记得哪个变种有什么具体问题了，但结果是，我试过的五种中*没有任何两种*能兼容稍微复杂点的程序！我整个人都震惊了，我吓尿了。我给这些声称「互相兼容」的操作系统们跪了。真正让我无语的是其他Unix黑客们对此见怪不怪！他们的态度差不多是「好吧，生活就是如此，这里写几个`#ifdef`，那里写几个假库函数接口。就这样，有什么大不了的？」
> 
> 我不知道这个故事除了教你绝对不要相信任何Unix相关的东西都是互相「兼容」的，还会有什么别的寓意。噢，对了，后来我听说那间软件公司落后于他们的预定计划两年，最终他们完全抛弃Unix，投奔了MS-DOS阵营。他们称，只有这样产品才得以面世！

一条1989年发表在Peter Neumann的RISKS邮件列表的帖子里，Pete Schilling，一位美国铝业实验室应用数学与计算机技术部的工程师，批评「标准」这个词用于像Unix这样的软件系统是完全错误的。真正的标准，Schilling写道，是给像钢筋这样的物理实体用的：它让设计师们在订购部件和将部件纳入设计时，能预知它在实际使用中的性能。「如果一条钢筋在使用中出现故障，那么建筑师的律师就可以联系钢筋制造商的律师来探讨赔偿和惩罚事宜。」显然，需要承担责任的恐惧将使大多数公司保持诚信，而那些不诚信的公司大概会很快倒闭。

「标准」这个概念就完全不适用于软件系统了。Unix版本应该满足什么标准？POSIX？X/Open？CORBA？这些标准间有如此大的回旋余地，以至于要惩罚违反标准的公司简直是个可笑的想法。实际上，*大家*都遵守自家的标准，只不过各家产品还是互不兼容。

Sun Microsystems近期宣布要和NeXT公司共同推出OpenStep，一个全新的、面向对象的用户界面标准。为了实现开放性，Sun公司把Objective-C和NEXTSTEP包装成将用C++
和DOE[^doe]。你说你不能决定要遵守什么标准？没问题：你现在可以全都遵守了。

[^doe]: Sun公司研发的分布式计算环境，采用CORBA作为后端，OpenStep作为用户界面。

但愿你那时候不需要做什么正事。

## Unix的神话

吸毒者们常常自欺欺人。「大麻才不会把我弄傻。」「我只吸一口。」「只要我想我肯定能戒掉。」如果你在毒品市场里，肯定也会听到这些谎言。

Unix有一系列自己的神话，还有一个传播它们的毒贩网络。也许你可能听说过这些：

1. 它是标准的；
2. 它又快又稳定；
3. 它是最适合任何目的的操作系统；
4. 它很小，很简单，还很优雅；
5. Shell脚本和管道是用来解决复杂问题的最佳途径；
6. 它有在线文档；
7. 它有文档；
8. 它用高级语言写成；
9. X和Motif[^motif]让Unix变得像Macintosh一样对用户友好；
10. 进程开销很小；
11. 它发明了：
    * 文件系统层次结构
    * 电子邮件
    * 网络和互联网协议
    * 远程文件访问
    * 安全性/密码/文件保护
    * Finger协议
    * 对I/O设备的统一处理
12. 它是高效的编程环境；
13. 它是一个现代操作系统；
14. 它是人们想要的东西；
15. 它的源代码是：
    * 可获得的
    * 可理解的
    * 你从供应商处买到的刚好和你正在运行的匹配

[^motif]: 一个运行于X窗体系统的widget工具箱。

我们将在后文谈及并揭穿大部分神话。

## 译注
