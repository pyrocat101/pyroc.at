---
layout: post
title: "Unix: 世界上第一个计算机病毒"
date: 2013-04-04 21:44
comments: true
categories: Translation
---

{% blockquote 佚名 %}
伯克利最著名的两大特产分别是LSD和Unix，我可不认为这是一种巧合。
{% endblockquote %}

病毒越小、适应性越强就越好。它们不太复杂：没有呼吸作用、新陈代谢和运动等神秘功能所需要的构造，它们只有能实现自我复制的DNA和RNA。比方说，随便哪种流感病毒的体积都比它们感染的细胞要小许多倍，但它们却能在每个流感季节成功地变异出新变种。偶尔毒性增强了，随之产生的流行病会杀死数百万人，因为他们的免疫系统没法在病毒入侵前消灭病毒。但是，大多数时候，病毒只是些小烦恼--不可避免，却无处不在。

优秀病毒的特征是：

* 体积小

  病毒能做的不多，所以他们也不需要很大。有人还争论病毒到底是或者的生物还是只是几片具有破坏性的核酸和蛋白质。

* 移植性强

  一个病毒单体可以入侵多种细胞。经过少许变异后，甚至能入侵更多种类。动物和病毒常常通过变异来攻击人类。证据表明，艾滋病病毒很可能是由猿猴病毒变异而来。

* 霸占宿主资源

  如果宿主没有办法为病毒提供安全的环境和自我复制的能量，病毒就会死。

* 快速变异

  病毒频繁地变异成不同形态。它们虽然有着相同的结构，但却有足够打的差别来混淆宿主的防御系统。

Unix具备一个极其成功的病毒的所有特征。它的最初形态它很小，功能也寥寥无几，设计上的极简主义是最重要的考虑因素。正是因为它缺乏一个真正的操作系统所应该具有的功能（比如内存映射文件啦、高速I/O啦、健壮的文件系统啦、记录啦、文件啦、设备锁啦、合理的进程间通信等等一长串乏味的清单），它具有高度可移植性。一个更强大的操作系统就没有这么高的可移植性了。Unix还从它的宿主处吸取能量。如果没有系统管理员打理Unix，它就会时不时崩溃啊、吐核啊、或者当机。Unix还经常变异：凑合用的补丁使一个版本里的行为无法在另一个版本里重现。如果*安德罗美达菌株*是一个软件的话，那么它一定是Unix。

Unix一定是带有用户界面的计算机病毒。

## 瘟疫史

Unix疫的根源可以追溯到上个世纪60年代，当AT&T、通用电气和麻省理工正在开发一种叫做“信息实用工具”的新型计算机系统的时候。由国防部高级研究项目局（ARPA）出资，这个项目计划开发一个和发电厂一样可靠的的计算机系统：将源源不断的计算资源提供给成百上千的普通人。这个“信息实用工具”将配备足够多的中央处理器、内存条、输入/输出处理器，这样就可以同时服务许多用户。系统被设计得具有最高级别的安全性，这样某个用户的行为绝不会影响到其他用户。它那野心勃勃的目标也体现在名字中：Multics，即*多路复用信息与计算机系统*（MULTiplexed Information and Computer System）的缩写。

Multics被*设计*用于存储与获取大规模数据集，大量用户同时使用，以及帮助他们互相沟通。同样，它也保护用户免于外部攻击。它被设计成了一辆坦克，使用Multics就像在开一辆坦克。

终于，Multics实现了所有的目标。不过，在1969年，项目却落后于预定计划。AT&T退缩了：他们退出参与计划，留给三位研究员--Ken Thompson、Dennis Ritchie、Joseph Ossana--一段未预料到的空闲时间。就在程序员们试图说服管理层购买一台DEC System 10（一台拥有复杂的交互式操作系统的、强大的分时计算机系统）未果后，Thompson和他的朋友们转而为实验室一角那台闲置的PDP-7计算机编写（玩）一个被称为Space Travel的游戏。

最初，Thompson使用贝尔实验室的GE465将Space Travel程序交叉编译到PDP-7上。不过很快的--意识到他们为PDP-7编写一个操作系统比在GE465舒适的环境下开发Space War要更快--Thompson为PDP-7编写了一个汇编器、文件系统、一个很小的内核，这都是为了玩Space Travel。就这样，Unix诞生了。

就像研究细菌武器的科学家（同一时期另一项ARPA资助的另一项计划）一样，早期Unix研究者并没有意识到他们的行为可能带来的严重后果。不像细菌武器的实验者们，Thompson和Ritchie没有做任何防护。确实，他们没有认为自己是病原体，而把自己视为福音传道士。Thompson和他的伙伴们无意中写了被称为文档的几页纸，然后他们真的开始*散播*这些文档。

最初，Unix感染仅限于贝尔实验室里少数几个特定群体。

## 性、毒品和Unix

## 标准化

### 为什么Unix卖家都不想要一个标准化的Unix

## Unix的神话

