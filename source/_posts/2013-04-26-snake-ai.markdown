---
layout: post
title: 一个贪吃蛇的AI实现
date: 2013-04-26 17:14
comments: true
categories: Tech
---

前几天reddit上有一张很火的贪吃蛇动态图[^snake-reddit]，图中的蛇吃遍了所有食物，最后将身体将整个地图占满，走位还十分风骚：

[^snake-reddit]: [A mesmerizing game of Snake [GIF]](http://www.reddit.com/r/woahdude/comments/1bycra/a_mesmerizing_game_of_snake_gif/)

![snake-gif](http://i.pyroc.at/russian-snake.gif)

于是为了<del>一雪以前被贪吃蛇虐的前耻</del>研究如何用程序实现同样的效果，我动手写了一个[基于HTML Canvas的贪吃蛇游戏和AI][my-snake-ai]。

[my-snake-ai]: http://{{ site.github_user }}.github.io/snake-ai/

<!-- more -->

保证贪吃蛇存活的基本策略是：在能到达尾部的前提下吃到食物。这样考虑的原因有二：一来贪吃蛇不至于盲目追逐食物将自己引进死路；二来尾部不断前进为蛇的移动腾出空间，因此追着尾部是一条安全的路径。基于这个策略，AI优先保证蛇头到蛇尾的连通性，若前瞻到自己吃到食物后仍然可以到达尾部，那么就认为这条通往食物的路径是安全路径，否则就先追着尾部移动，伺机继续寻找通往食物的安全路径。同理，若出现某种蛇头无法到达食物（比如食物落在被一部分身体围起来的孔中），AI也先追着尾部移动，等待能安全到达食物的时机。

寻找前往食物的安全路径使用的是广度优先搜索（BFS），寻找蛇头到食物的最短路径。若找到这条路径，AI将分派一条「假想蛇」沿着路径到达食物，再从这里开始观察是否有到达尾部的安全路径。若前面无法找到到达食物的路径，或者到达食物后无法安全到达蛇尾，AI会设法让蛇追随蛇尾。这里我尝试了是BFS和随机安全路径。很可惜两者的效果都不是十分理想：前者很容易让蛇陷入追着尾部跑的无限循环；后者的随机性使得后期地图上被蛇身分隔出许多小孔，需要迂回很久才能随机地到达落在孔中的食物。在网上搜索其他AI实现的过程中，发现有人也受那张gif图启发实现了一个贪吃蛇AI[^hawstein]。他的AI中蛇追随尾部使用了一种最远路径的近似算法：从食物出发，通过BFS计算并记录地图上每个未被蛇占据的格子到食物的*最短距离*，然后挑选与蛇头邻接的有效格子中距离值*最大*的走，且只走这一步。然后再回到「伺机寻找到达食物的安全路径，找不到就再沿着『最远路径』走一步」的循环。采用了这种方法以后，AI可以取得比较令人满意的结果。

由于AI将追随尾部作为优先级最高的任务，因此理论上这个贪吃蛇AI永远不会撞死。可是这个AI在实测中占满地图中绝大部分格子后很容易陷入追逐自己尾巴的无限循环。比如：

![snake-loop](http://i.pyroc.at/snake-loop.png)

图中剩下了几个不会被填上的小孔，分为两种情况：一是若蛇头选择填孔，会把自己引入死路；二是由于选择最长路径的算法相对与蛇的状态有很强的确定性，导致永远不会选择能够填孔的路线。不管是哪种情况，蛇都会为了陷入追逐尾部的无限循环。

观察gif图中贪吃蛇的风骚走位，我们会发现它并非总是选择最短路径到达食物，并且蛇在游戏晚期会很有前瞻性地迂回扫过地图，不让蛇身围住某个区域导致难以处理的小孔。这两个观察，也许可以作为未来改进贪吃蛇AI的启发。

目前游戏+AI的源码也就200来行（再赞CoffeeScript的简洁），源码[在此](https://github.com/{{ site.github_user }}/snake-ai)。

[^hawstein]: [如何用Python写一个贪吃蛇AI](http://hawstein.com/posts/snake-ai.html)

